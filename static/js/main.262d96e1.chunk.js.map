{"version":3,"sources":["Component/Posts/Posts.module.css","Component/SearchInput/SearchInput.module.css","Action/Action.js","Reducer/Reducer.js","Component/Posts/Posts.js","Component/SearchInput/SearchInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchPosts","query","sortBy","limit","a","axios","get","catch","error","console","log","result","type","posts","data","children","map","child","sortInitialState","sortOptions","value","displayValue","limitInitialState","limitOptions","initialState","loading","hasError","rootReducer","combineReducers","selectedSort","state","action","sortOption","selectedLimit","limitOption","userInput","Posts","props","className","classes","Container","post","index","key","List","title","connect","sorts","option","limits","sortValue","limitValue","textInput","useRef","submitHandler","e","preventDefault","dispatch","Form","ref","placeholder","onBlur","target","Input","Label","onChange","Select","sort","onClick","Button","App","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","postReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.262d96e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"Posts_List__1Z_u8\",\"Container\":\"Posts_Container__cKGq6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"SearchInput_Form__2sMWA\",\"Input\":\"SearchInput_Input__3s3pC\",\"Select\":\"SearchInput_Select__1fhC6\",\"Button\":\"SearchInput_Button__FGa6g\"};","import axios from 'axios';\n\nexport const REQUEST_POSTS = \"REQUEST_POST\";\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\nexport const GET_POSTS_FAIL = \"GET_POSTS_FAIL\";\nexport const USER_INPUT = \"USER_INPUT\";\nexport const SELECT_SORT = \"SELECT_SORT\";\nexport const SELECT_LIMIT = \"SELECT_LIMIT\";\nexport const SAVED_USER_INPUT = 'SAVED_USER_INPUT';\n\nexport const userInput = query => {\n  return {\n    type: USER_INPUT,\n    userInput:query\n  };\n};\n\n\nexport const selectSort = sortOption => {\n  return {\n    type: SELECT_SORT,\n    sortOption\n  };\n};\n\nexport const selectLimit = limitOption => {\n  return {\n    type: SELECT_LIMIT,\n    limitOption\n  };\n};\nexport const requestPosts = posts => {\n  return {\n    type: REQUEST_POSTS,\n    posts\n  };\n};\n\nexport const getPostsSuccess = data => {\n  return {\n    type: GET_POSTS_SUCCESS,\n    posts: data.children.map(child => child.data)\n  };\n};\n\nexport const getPostsFail = () => {\n  return {\n    type: GET_POSTS_FAIL\n  };\n};\n\nexport const fetchPosts = async (query, sortBy, limit) => {\n  const result = await axios\n    .get(\n        `https://www.reddit.com/r/subreddit/search.json?q=${query}&sort=${sortBy}&limit=${limit} `\n    )\n    .catch(error => console.log(error))\n    console.log(result)\n    return getPostsSuccess(result.data.data)\n};\n\n// two ways of fetching api\n\n\n// export const fetchPosts = (query, sortBy, limit) => {\n//     return dispatch => {\n//         dispatch(requestPosts(query, sortBy, limit))\n//         return fetch(`https://www.reddit.com/r/subreddit/search.json?q=${query}&sort=${sortBy}&limit=${limit} `)\n//             .then(response => response.json())\n//             .then(json => dispatch(getPostsSuccess(json)))\n//     }\n// }","import * as actionsType from '../Action/Action';\nimport {combineReducers} from 'redux';\n \nconst sortInitialState = {\n    sortOptions: [\n        {value:'relevance', displayValue:'relevance'},\n        {value:'hot', displayValue:'hot'},\n        {value:'top', displayValue:'top'},\n        {value:'new', displayValue:'new'}\n    ],\n    value:''\n}\n\nconst selectedSort = (state = sortInitialState, action) => {\n    switch(action.type) {\n        case actionsType.SELECT_SORT:\n            return {\n                ...state,\n                value:action.sortOption\n            }\n        default:\n            return state\n    }\n}\n\nconst limitInitialState = {\n    limitOptions:[\n        {value:'5', displayValue:'5'},\n        {value:'10', displayValue:'10'},\n        {value:'15', displayValue:'15'},\n        {value:'20', displayValue:'20'}\n    ],\n    value:''\n}\n\nconst selectedLimit = (state = limitInitialState, action) => {\n    switch(action.type) {\n        case actionsType.SELECT_LIMIT:\n            return {\n                ...state,\n                value:action.limitOption\n            }\n        default:\n            return state\n    }\n}\n\nconst initialState = {\n    query:'',\n    posts: [],\n    loading:false,\n    hasError:false,\n}\n\nconst posts = (state=initialState, action) => {\n    switch(action.type) {\n        case actionsType.USER_INPUT:\n            return {\n                ...state,\n                query:action.userInput\n            }\n        case actionsType.REQUEST_POSTS:\n            return {\n                ...state,\n                loading:true,\n                hasError:false\n            }\n        case actionsType.GET_POSTS_SUCCESS:\n            return {\n                ...state,\n                posts:action.posts,\n                loading:false,\n                hasError:false\n            }\n        case actionsType.GET_POSTS_FAIL:\n            return {\n                ...state,\n                loading:false,\n                hasError:true\n            }\n        default:\n            return state\n    }\n};\n\n\nconst rootReducer = combineReducers({\n    selectedSort,\n    selectedLimit,\n    posts\n})\n\nexport default rootReducer;","import React from 'react';\nimport classes from './Posts.module.css';\n\nconst Posts = (props) => {\n    // console.log(props)\n    const {posts} = props;\n    // console.log(posts)\n    return (\n        <div className={classes.Container}>\n            {posts.map((post,index) => (\n                <li key={index} className={classes.List}>{post.title}</li>\n            ))}\n        </div>\n    )\n};\n\nexport default Posts;\n","import React, {useRef} from 'react';\nimport { connect } from 'react-redux';\nimport {fetchPosts, userInput } from '../../Action/Action';\nimport {selectSort, selectLimit} from '../../Action/Action';\n// import {selectedSort} from '../../Reducer/Reducer';\nimport Posts from '../Posts/Posts';\nimport classes from './SearchInput.module.css';\n\nconst SearchInput = (props) => {\n\n    const textInput = useRef('')\n\n    const inputChangeHandler = (e) => {\n        props.dispatch(userInput(e.target.value))\n    }\n    const sortChangeHandler = (e) => {\n        // console.log(e.target.value)\n        // console.log(props.sortValue)\n        props.dispatch(selectSort(e.target.value))\n    }\n\n    const limitChangeHandler = (e) => {\n        props.dispatch(selectLimit(e.target.value))\n    }\n\n    const submitHandler = async e => {\n        e.preventDefault()\n        const result = await fetchPosts(\n            props.query,\n            props.sortValue,\n            props.limitValue\n        )\n        props.dispatch(result)\n    }\n\n    return (\n        <>\n            <form className={classes.Form}>\n                <input \n                    type=\"text\" \n                    ref={textInput}\n                    placeholder=\"Search Term...\"\n                    onBlur={inputChangeHandler}\n                    className={classes.Input}\n                />\n                <br />\n                <br />\n                <label className={classes.Label}>\n                    Sort By:\n                    <select onChange={sortChangeHandler} value={props.sortValue} className={classes.Select}>\n                        {props.sorts.map(sort => (\n                            <option value={sort.value} key={sort.value}>{sort.displayValue}</option>\n                        ))}\n                    </select>\n                </label>\n                <label>\n                    Limit:\n                    <select onChange={limitChangeHandler} value={props.limitValue} className={classes.Select}>\n                        {props.limits.map(limit => (\n                            <option value={limit.value} key={limit.value}>{limit.displayValue}</option>\n                        ))}\n                    </select>\n                </label>\n                <br />\n                <br />\n                <br />\n                <input type=\"submit\" value=\"SEARCH\" onClick={submitHandler} className={classes.Button}/>\n            </form>\n            <Posts posts={props.posts}/>\n        </>\n    )\n};\n\nconst mapStateToProps = state => {\n    // console.log('state', state)\n    return {\n        posts:state.posts.posts,\n        query:state.posts.query,\n        sorts:state.selectedSort.sortOptions.map(option => {\n            return option\n        }),\n        limits:state.selectedLimit.limitOptions.map(option => {\n            return option\n        }),\n        sortValue:state.selectedSort.value,\n        limitValue:state.selectedLimit.value\n    }\n}\n\n \nexport default connect(mapStateToProps)(SearchInput);\n","import React from 'react';\nimport './App.css';\nimport SearchInput from './Component/SearchInput/SearchInput';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Search Anything In Reddit</h2>\n        <SearchInput />\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport {Provider} from 'react-redux';\nimport postReducer from './Reducer/Reducer';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(postReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}